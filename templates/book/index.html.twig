{% extends 'base.html.twig' %}

{% block title %}Ma Collection de Livres{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
{% endblock %}

{% block body %}
<nav class="bg-white shadow-lg">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
            <div class="flex items-center">
                <h1 class="text-2xl font-bold text-gray-800">Ma Collection</h1>
            </div>
            <div class="flex items-center">
                {% if is_granted('ROLE_ADMIN') %}
                    <a href="{{ path('admin') }}" class="mr-4 px-3 py-1 bg-green-100 text-green-700 rounded-md hover:bg-green-200 focus:outline-none focus:ring-2 focus:ring-green-500">
                        Admin
                    </a>
                {% endif %}
                <form action="{{ path('app_logout') }}" method="post">
                    <button type="submit" class="px-3 py-1 bg-red-100 text-red-700 rounded-md hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-red-500">
                        <i class="fas fa-sign-out-alt"></i> Déconnexion
                    </button>
                </form>
            </div>
        </div>
    </div>
</nav>

    <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        {% for message in app.flashes('success') %}
            <div class="mb-4 p-4 bg-green-100 border border-green-400 text-green-700 rounded">
                {{ message }}
            </div>
        {% endfor %}

        <div class="bg-white">
            <div class="mx-auto py-8">
                <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
                    {% for book in books %}
                        <div class="bg-white rounded-lg shadow-lg overflow-hidden flex flex-col h-[32rem] book-card cursor-pointer" data-book-id="{{ book.id }}">
                            {% if book.photoFileName %}
                                <img class="h-64 w-full object-cover flex-shrink-0" src="{{ asset('uploads/photos/' ~ book.photoFileName) }}" alt="{{ book.title }}">
                            {% else %}
                                <div class="h-64 w-full bg-gray-200 flex items-center justify-center flex-shrink-0">
                                    <svg class="h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"/>
                                    </svg>
                                </div>
                            {% endif %}
                            <div class="p-6 flex-1 flex flex-col">
                                <div class="flex-1">
                                    <h2 class="text-xl font-semibold text-gray-900 line-clamp-2 h-14">{{ book.title }}</h2>
                                    <div class="space-y-1 mt-4">
                                        <p class="text-gray-600">par {{ book.author }}</p>
                                        <p class="text-sm text-gray-500">Publié le: {{ book.publicationDate|date('Y-m-d') }}</p>
                                        <p class="text-sm text-gray-500">ISBN: {{ book.ISBN }}</p>
                                        <p class="text-sm text-gray-500">Ajouté par: {{ book.buyBy }}</p>
                                    </div>
                                </div>
                                
                                <div class="mt-4 flex justify-end space-x-2">
                                    <button onclick="openEditModal({{ book.id }})" class="px-3 py-1 bg-indigo-100 text-indigo-700 rounded-md hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                                        <i class="fas fa-edit"></i> Modifier
                                    </button>
                                    <form action="{{ path('app_book_delete', {'id': book.id}) }}" method="post" class="inline" onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer ce livre ?');">
                                        <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ book.id) }}">
                                        <button type="submit" class="px-3 py-1 bg-red-100 text-red-700 rounded-md hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-red-500">
                                            <i class="fas fa-trash"></i> Supprimer
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    {% else %}
                        <p class="text-gray-500 text-center col-span-full">Aucun livre dans la collection.</p>
                    {% endfor %}
                </div>
            </div>
        </div>

        <div class="mt-8 bg-white rounded-lg shadow-lg overflow-hidden">
            <div class="p-6">
                <div class="flex justify-between items-center cursor-pointer" onclick="toggleForm()">
                    <h2 class="text-2xl font-bold text-gray-900">Ajouter un Livre</h2>
                    <i class="fas fa-chevron-down text-gray-500 transition-transform duration-200"></i>
                </div>
                <div id="bookForm" class="hidden mt-6">
                    {{ form_start(form, {'attr': {'class': 'space-y-6', 'enctype': 'multipart/form-data'}}) }}
                        <div class="space-y-4">
                            <div>
                                {{ form_label(form.title, 'Titre', {'label_attr': {'class': 'block text-sm font-medium text-gray-700'}}) }}
                                {{ form_widget(form.title, {'attr': {'class': 'mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500', 'id': 'book_title'}}) }}
                                {{ form_errors(form.title, {'attr': {'class': 'mt-1 text-sm text-red-600'}}) }}
                            </div>

                            <div>
                                {{ form_label(form.author, 'Auteur', {'label_attr': {'class': 'block text-sm font-medium text-gray-700'}}) }}
                                {{ form_widget(form.author, {'attr': {'class': 'mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500', 'id': 'book_author'}}) }}
                                {{ form_errors(form.author, {'attr': {'class': 'mt-1 text-sm text-red-600'}}) }}
                            </div>

                            <div>
                                {{ form_label(form.publicationDate, 'Date de Publication', {'label_attr': {'class': 'block text-sm font-medium text-gray-700'}}) }}
                                {{ form_widget(form.publicationDate, {'attr': {'class': 'mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500', 'id': 'book_publicationDate'}}) }}
                                {{ form_errors(form.publicationDate, {'attr': {'class': 'mt-1 text-sm text-red-600'}}) }}
                            </div>

                            <div>
                                {{ form_label(form.ISBN, 'ISBN', {'label_attr': {'class': 'block text-sm font-medium text-gray-700'}}) }}
                                {{ form_widget(form.ISBN, {'attr': {'class': 'mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500', 'id': 'book_ISBN'}}) }}
                                {{ form_errors(form.ISBN, {'attr': {'class': 'mt-1 text-sm text-red-600'}}) }}
                            </div>

                            <div>
                                {{ form_label(form.buyBy, 'Acheté par', {'label_attr': {'class': 'block text-sm font-medium text-gray-700'}}) }}
                                {{ form_widget(form.buyBy, {'attr': {'class': 'mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500'}}) }}
                                {{ form_errors(form.buyBy, {'attr': {'class': 'mt-1 text-sm text-red-600'}}) }}
                            </div>

                            <div>
                                {{ form_label(form.photoFileName, 'Photo de Couverture', {'label_attr': {'class': 'block text-sm font-medium text-gray-700'}}) }}
                                {{ form_widget(form.photoFileName, {'attr': {'class': 'mt-1 block w-full text-sm text-gray-500
                                    file:mr-4 file:py-2 file:px-4
                                    file:rounded-md file:border-0
                                    file:text-sm file:font-semibold
                                    file:bg-indigo-50 file:text-indigo-700
                                    hover:file:bg-indigo-100'}}) }}
                                {{ form_errors(form.photoFileName, {'attr': {'class': 'mt-1 text-sm text-red-600'}}) }}
                            </div>
                        </div>

                        <div class="mt-6 flex items-center justify-between">
                            <button type="submit" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                Ajouter un livre
                            </button>
                            <button type="button" id="clearFormBtn" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                                Effacer
                            </button>
                        </div>
                    {{ form_end(form) }}
                </div>
            </div>
        </div>
    </div>

    <div id="editModal" class="hidden fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center">
        <div class="bg-white rounded-lg p-6 max-w-2xl w-full mx-4">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-medium text-gray-900">Modifier le Livre</h3>
                <button onclick="closeEditModal()" class="text-gray-400 hover:text-gray-500">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <form id="editForm" method="post" class="space-y-4" enctype="multipart/form-data">
            </form>
        </div>
    </div>

    <div id="bookDetailsModal" class="fixed inset-0 z-50 overflow-y-auto hidden">
        <div class="flex min-h-screen items-center justify-center p-4 text-center">
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
            
            <div class="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-4xl">
                <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4 max-h-[80vh] overflow-y-auto">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-lg font-medium text-gray-900">Détails du Livre</h3>
                        <button id="closeBookDetailsModal" class="text-gray-400 hover:text-gray-500">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div id="bookDetailsModalContent">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        function toggleForm() {
            const formContent = document.getElementById('bookForm');
            const icon = document.querySelector('.fa-chevron-down');
            formContent.classList.toggle('hidden');
            icon.classList.toggle('rotate-180');
        }

        async function openEditModal(bookId) {
            const modal = document.getElementById('editModal');
            const form = document.getElementById('editForm');
            
            try {
                const response = await fetch(`/book/${bookId}/get`);
                const bookData = await response.json();
                
                const addForm = document.querySelector('#bookForm form').cloneNode(true);
                addForm.action = `/book/${bookId}/edit`;
                addForm.method = 'POST';
                addForm.enctype = 'multipart/form-data';
                
                addForm.querySelector('[name="book[title]"]').value = bookData.title;
                addForm.querySelector('[name="book[author]"]').value = bookData.author;
                addForm.querySelector('[name="book[publicationDate]"]').value = bookData.publicationDate;
                addForm.querySelector('[name="book[ISBN]"]').value = bookData.ISBN;
                addForm.querySelector('[name="book[buyBy]"]').value = bookData.buyBy;
                
                const fileInput = addForm.querySelector('input[type="file"]');
                if (fileInput) {
                    fileInput.value = '';
                }
                
                const submitBtn = addForm.querySelector('button[type="submit"]');
                submitBtn.textContent = 'Enregistrer les modifications';
                submitBtn.classList.remove('bg-indigo-600', 'hover:bg-indigo-700');
                submitBtn.classList.add('bg-green-600', 'hover:bg-green-700');
                
                form.innerHTML = '';
                form.appendChild(addForm);
                
                modal.classList.remove('hidden');
            } catch (error) {
                console.error('Erreur lors de la récupération des données du livre:', error);
            }
        }

        function closeEditModal() {
            const modal = document.getElementById('editModal');
            modal.classList.add('hidden');
        }

        document.getElementById('editModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeEditModal();
            }
        });

        document.getElementById('clearFormBtn').addEventListener('click', function() {
            const form = document.querySelector('#bookForm form');
            const inputs = form.querySelectorAll('input');
            inputs.forEach(input => {
                input.value = '';
            });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const titleInput = document.getElementById('book_title');
            const authorInput = document.getElementById('book_author');
            const publicationDateInput = document.getElementById('book_publicationDate');
            const isbnInput = document.getElementById('book_ISBN');
            const buyByInput = document.getElementById('book_buyBy');
            const clearFormBtn = document.getElementById('clearFormBtn');
            const photoFileInput = document.getElementById('book_photoFileName');

            // Pre-fill buyBy with current username if available
            buyByInput.value = '{{ app.user ? app.user.username : '' }}';

            // Clear form function
            function clearForm() {
                titleInput.value = '';
                authorInput.value = '';
                publicationDateInput.value = '';
                isbnInput.value = '';
                photoFileInput.value = '';
            }

            // Add event listener to clear button
            clearFormBtn.addEventListener('click', clearForm);

            function debounce(func, timeout = 1000) {
                let timer;
                return (...args) => {
                    clearTimeout(timer);
                    timer = setTimeout(() => { func.apply(this, args); }, timeout);
                };
            }

            function searchBookInfo() {
                const query = titleInput.value + ' ' + authorInput.value;
                if (query.trim().length < 3) return;

                fetch('{{ path('app_book_search_info') }}?query=' + encodeURIComponent(query))
                    .then(response => response.json())
                    .then(data => {
                        if (!data.error) {
                            if (data.title && !titleInput.value) {
                                titleInput.value = data.title;
                            }
                            if (data.author && !authorInput.value) {
                                authorInput.value = data.author;
                            }
                            if (data.publicationDate && !publicationDateInput.value) {
                                publicationDateInput.value = data.publicationDate;
                            }
                            if (data.ISBN && !isbnInput.value) {
                                isbnInput.value = data.ISBN;
                            }
                        }
                    })
                    .catch(error => {});
            }

            const debouncedSearchBookInfo = debounce(searchBookInfo);

            titleInput.addEventListener('input', debouncedSearchBookInfo);
            authorInput.addEventListener('input', debouncedSearchBookInfo);
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Ajout de l'événement de clic sur les cartes de livres
            document.querySelectorAll('.book-card').forEach(card => {
                card.addEventListener('click', function() {
                    const bookId = this.dataset.bookId;
                    
                    // Récupérer les détails du livre
                    fetch(`{{ path('app_book_modal_details', {'id': 'BOOK_ID'}) }}`.replace('BOOK_ID', bookId))
                        .then(response => response.json())
                        .then(data => {
                            // Construction du HTML pour la modal
                            const detailsHtml = `
                                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                                    <!-- Image du livre -->
                                    <div>
                                        ${data.photoFileName 
                                            ? `<img src="/uploads/photos/${data.photoFileName}" alt="${data.title}" class="w-full h-auto object-cover rounded-lg">` 
                                            : `${data.imageLinks && data.imageLinks.thumbnail 
                                                ? `<img src="${data.imageLinks.thumbnail}" alt="${data.title}" class="w-full h-auto object-cover rounded-lg">` 
                                                : '<div class="bg-gray-200 h-64 flex items-center justify-center">Pas d\'image</div>'}`}
                                    </div>

                                    <!-- Détails du livre -->
                                    <div class="col-span-2">
                                        <h2 class="text-2xl font-bold mb-4">${data.title}</h2>
                                        
                                        <div class="space-y-2">
                                            <p><strong>Auteur:</strong> ${data.author}</p>
                                            <p><strong>Date de publication:</strong> ${data.publicationDate}</p>
                                            <p><strong>ISBN:</strong> ${data.ISBN}</p>
                                            <p><strong>Ajouté par:</strong> ${data.buyBy}</p>
                                            
                                            ${data.pageCount ? `<p><strong>Nombre de pages:</strong> ${data.pageCount}</p>` : ''}
                                            ${data.categories ? `<p><strong>Catégories:</strong> ${data.categories.join(', ')}</p>` : ''}
                                        </div>

                                        <!-- Description -->
                                        ${data.description ? `
                                        <div class="mt-4">
                                            <h3 class="text-lg font-semibold mb-2">Description</h3>
                                            <p class="text-gray-600">${data.description}</p>
                                        </div>` : ''}

                                        <!-- Extrait de recherche -->
                                        ${data.searchInfo ? `
                                        <div class="mt-4">
                                            <h3 class="text-lg font-semibold mb-2">Extrait</h3>
                                            <p class="text-gray-600 italic">${data.searchInfo}</p>
                                        </div>` : ''}
                                    </div>
                                </div>
                            `;

                            // Insertion des détails dans la modal
                            const bookDetailsModalContent = document.getElementById('bookDetailsModalContent');
                            bookDetailsModalContent.innerHTML = detailsHtml;
                            
                            // Afficher la modal
                            const bookDetailsModal = document.getElementById('bookDetailsModal');
                            bookDetailsModal.classList.remove('hidden');
                        })
                        .catch(error => {
                            console.error('Erreur lors de la récupération des détails:', error);
                            const bookDetailsModalContent = document.getElementById('bookDetailsModalContent');
                            bookDetailsModalContent.innerHTML = '<p class="text-red-500">Impossible de charger les détails du livre</p>';
                            const bookDetailsModal = document.getElementById('bookDetailsModal');
                            bookDetailsModal.classList.remove('hidden');
                        });
                });
            });

            // Fermeture de la modal
            const closeBookDetailsModal = document.getElementById('closeBookDetailsModal');
            closeBookDetailsModal.addEventListener('click', function() {
                const bookDetailsModal = document.getElementById('bookDetailsModal');
                bookDetailsModal.classList.add('hidden');
            });

            // Fermeture de la modal en cliquant à l'extérieur
            const bookDetailsModal = document.getElementById('bookDetailsModal');
            bookDetailsModal.addEventListener('click', function(e) {
                if (e.target === bookDetailsModal) {
                    bookDetailsModal.classList.add('hidden');
                }
            });
        });
    </script>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const titleInput = document.getElementById('book_title');
            const authorInput = document.getElementById('book_author');
            const publicationDateInput = document.getElementById('book_publicationDate');
            const isbnInput = document.getElementById('book_ISBN');
            const buyByInput = document.getElementById('book_buyBy');
            const clearFormBtn = document.getElementById('clearFormBtn');
            const photoFileInput = document.getElementById('book_photoFileName');

            // Pre-fill buyBy with current username if available
            buyByInput.value = '{{ app.user ? app.user.username : '' }}';

            // Clear form function
            function clearForm() {
                titleInput.value = '';
                authorInput.value = '';
                publicationDateInput.value = '';
                isbnInput.value = '';
                photoFileInput.value = '';
            }

            // Add event listener to clear button
            clearFormBtn.addEventListener('click', clearForm);

            function debounce(func, timeout = 1000) {
                let timer;
                return (...args) => {
                    clearTimeout(timer);
                    timer = setTimeout(() => { func.apply(this, args); }, timeout);
                };
            }

            function searchBookInfo() {
                const query = titleInput.value + ' ' + authorInput.value;
                if (query.trim().length < 3) return;

                fetch('{{ path('app_book_search_info') }}?query=' + encodeURIComponent(query))
                    .then(response => response.json())
                    .then(data => {
                        if (!data.error) {
                            if (data.title && !titleInput.value) {
                                titleInput.value = data.title;
                            }
                            if (data.author && !authorInput.value) {
                                authorInput.value = data.author;
                            }
                            if (data.publicationDate && !publicationDateInput.value) {
                                publicationDateInput.value = data.publicationDate;
                            }
                            if (data.ISBN && !isbnInput.value) {
                                isbnInput.value = data.ISBN;
                            }
                        }
                    })
                    .catch(error => {});
            }

            const debouncedSearchBookInfo = debounce(searchBookInfo);

            titleInput.addEventListener('input', debouncedSearchBookInfo);
            authorInput.addEventListener('input', debouncedSearchBookInfo);
        });
    </script>
{% endblock %}
